/**
 *
 */
package net.cellingo.sequence_tools.annotation;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * The base type for all sequence lements, also for bean types accessing only string properties
 *
 * @author Michiel Noback (www.cellingo.net, michiel@cellingo.net)
 * @version 1.0
 */
public class SequenceElementBase implements Serializable, Comparable<SequenceElement> {
    private static int maximumID = 0;
    private int autoGeneratedElementId;
    private String id;
    private SequenceElementType sequenceElementType;
    private ArrayList<SequenceCoordinates> coordinates;
    private double score;
    private String name;

    public static String getNextAutogeneratedId() {
        return "AutoGeneratedID=" + maximumID + 1;
    }

    public SequenceElementBase(String id) {
        this.autoGeneratedElementId = maximumID++;
        this.id = id;
        this.coordinates = new ArrayList<>();
        this.sequenceElementType = SequenceElementType.UNDEFINED;
    }

    public double getScore() {
        return score;
    }

    public void setScore(double score) {
        this.score = score;
    }

    /**
     * returns true if this sequence element consists of multiple sub-elements,
     * each with different coordinates.
     *
     * @return element is complex
     */
    public boolean isComplex() {
        return coordinates.size() > 1;
    }

    /**
     * add a sequence coordinates object to this sequence element
     *
     * @param coordinates
     */
    public void addCoordinates(SequenceCoordinates coordinates) {
        this.coordinates.add(coordinates);
        Collections.sort(this.coordinates);
    }

    /**
     * If this object is complex (i.e. composed of multiple elements) a coordinates object is return
     * encompassing the entire SequenceElement
     * SequenceCoordinates object
     *
     * @return first coordinates
     */
    public SequenceCoordinates getSequenceCoordinates() {
        if (coordinates.size() == 1) {
            return coordinates.get(0);
        }
        if (coordinates.size() > 1) {
            return new SequenceCoordinates(
                    coordinates.get(0).getStart(),
                    coordinates.get(coordinates.size() - 1).getStop(),
                    coordinates.get(0).isComplement(),
                    coordinates.get(0).isComplete()
            );
        }
        return null;
    }

    /**
     * a list of coordinates is returned; multiple coordinates form a complex element
     *
     * @return coordinates list
     */
    public List<SequenceCoordinates> getSequenceCoordinatesList() {
        return coordinates;
    }

    /**
     * @return the element type
     */
    public SequenceElementType getSequenceElementType() {
        return sequenceElementType;
    }

    /**
     * @param sequenceElementType the element type to set
     */
    public void setSequenceElementType(SequenceElementType sequenceElementType) {
        this.sequenceElementType = sequenceElementType;
    }

    /**
     * get the name of this element
     *
     * @return name
     */
    public String getName() {
        if (name == null) {
            return "ID=" + getId();
        }
        else return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAutoGeneratedElementId() {
        return autoGeneratedElementId;
    }

    public String getId() {
        return id;
    }

//    public void setId(String id) {
//        this.id = id;
//    }

    public String toString() {
        StringBuilder s = new StringBuilder();
        s.append(getClass().getSimpleName());
        s.append("[type=");
        s.append(sequenceElementType);
        if (name != null) {
            s.append(", name=");
            s.append(name);
        }
        if (coordinates.size() > 0) {
            s.append(", coordinates=");
            if (coordinates.size() > 1) {
                s.append("[[COMPLEX!]]");
            }
            s.append(getSequenceCoordinates());
        }
        s.append("]");
        return s.toString();
    }

    /**
     * implementing Comparable compareTo method
     */
    public int compareTo(SequenceElement otherElement) {
        final int BEFORE = -1;
        final int EQUAL = 0;
        final int AFTER = 1;
        if (this.getSequenceCoordinates().getStart() == otherElement.getSequenceCoordinates().getStart()) {
            return EQUAL;
        } else if (this.getSequenceCoordinates().getStart() < otherElement.getSequenceCoordinates().getStart()) {
            return BEFORE;
        } else {
            return AFTER;
        }
    }

}
